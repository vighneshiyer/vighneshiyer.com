direction: right

ds: Data Structures and tohost Encoding {
  device_list: |cpp
// device.h
class device_list_t {
  void register_device(device_t* dev);
  void handle_command(command_t cmd);
  std::vector<device_t*> devices;
};|

  device: |cpp
class device_t {
  void handle_command(command_t cmd);
  void register_command(size_t id, command_func_t);
};|

  command: |cpp
class command_t {
  command_t(memif_t& memif, uint64_t tohost)
  uint8_t device() { return tohost >> 56; }
  uint8_t cmd() { return tohost >> 48; }
  uint64_t payload() { return tohost << 16 >> 16; }
};|
  device_list -> device
  device -> command
  near: top-center
  direction: right
}

init: Initialization {
  register_dev: |cpp
// htif.cc
void htif_t::register_devices() {
  device_list.register_device(&syscall_proxy);
  device_list.register_device(&bcd);
}|

  syscall_cmd: |cpp
// syscall.cc
syscall_t::syscall_t(htif_t* htif) {
  register_command(0, &syscall_t::handle_syscall);
}|

  bcd_cmd: |cpp
// device.cc
bcd_t::bcd_t() {
  register_command(0, &bcd_t::handle_read);
  register_command(1, &bcd_t::handle_write);
}|
  register_dev -> syscall_cmd
  register_dev -> bcd_cmd
}

runtime: Runtime {
  main_loop: Main Simulation Loop {
    loop: |cpp
      // htif.cc
      int htif_t::run() {
        start();
        while (!signal_exit && exitcode == 0) {
          if ((tohost = from_target(mem.read_uint64(tohost_addr))) != 0)
            mem.write_uint64(tohost_addr, 0);
          if (tohost != 0) {
            command_t cmd(mem, tohost, fromhost_callback);
            device_list.handle_command(cmd);
          }
          step(5000); // Advances the target by executing 5000 instructions
        }
      }|
  }
  bcd_dispatch: Block Character Device {
    dispatch: |cpp
    void bcd_t::handle_write(command_t cmd) {
      canonical_terminal_t::write(cmd.payload());
    }|
  }
  syscall_dispatch: Syscall Proxy Device {
    dispatch: |cpp
      // syscall.cc
      table[62] = &syscall_t::sys_lseek;
      table[63] = &syscall_t::sys_read;
      table[64] = &syscall_t::sys_write;
      table[67] = &syscall_t::sys_pread;

      void syscall_t::handle_syscall(command_t cmd) {
        if (cmd.payload() & 1) {
          htif->exitcode = cmd.payload();
          // Print exitcode if non-zero
        }
        else // proxied system call
          dispatch(cmd.payload());
      }

      void syscall_t::dispatch(reg_t mm) {
        reg_t magicmem[8];
        memif->read(mm, sizeof(magicmem), magicmem);

        reg_t syscall_num = htif->from_target(magicmem[0]);
        syscall_args = magicmem[1:7];
        this->*table[syscall_num](syscall_args);
      }
    |
  }
  main_loop -> bcd_dispatch
  main_loop -> syscall_dispatch
  near: bottom-center
  direction: right
}
